--- name:default
# Cycle time in seconds. IMPORTANT: This has to be the same value as the period of this component!
cycle_time: 0.02

# These are the motion constraints for the output trajectory. Will use max/min position, max vel, max acceleration and max jerk to shape the output trajectory.
limits:
  names: ["Joint_one"]#, "Joint_two", "Joint_three", "Joint_four", "Joint_five", "Joint_six", "Joint_seven", "Joint_eight", "Joint_nine", "Joint_ten"]
  elements: [{max: {position: 1.5, speed: 0.1, acceleration: 10.0}, min: {position: -1.0}, max_jerk: 10.0}]
           #  {max: {position: 2.0, speed: 2.0, acceleration: 4.0}, min: {position: -1.5}, max_jerk: 4.0},
           #  {max: {position: 2.0, speed: 2.0, acceleration: 4.0}, min: {position: -1.5}, max_jerk: 4.0},
           #  {max: {position: 2.0, speed: 2.0, acceleration: 4.0}, min: {position: -1.5}, max_jerk: 4.0},
           #  {max: {position: 2.0, speed: 2.0, acceleration: 4.0}, min: {position: -1.5}, max_jerk: 4.0},
           #  {max: {position: 2.0, speed: 2.0, acceleration: 4.0}, min: {position: -1.5}, max_jerk: 4.0},
           #  {max: {position: 2.0, speed: 2.0, acceleration: 4.0}, min: {position: -1.5}, max_jerk: 4.0},
           #  {max: {position: 2.0, speed: 2.0, acceleration: 4.0}, min: {position: -1.5}, max_jerk: 4.0},
           #  {max: {position: 2.0, speed: 2.0, acceleration: 4.0}, min: {position: -1.5}, max_jerk: 4.0},
           #  {max: {position: 2.0, speed: 2.0, acceleration: 4.0}, min: {position: -1.5}, max_jerk: 4.0}]

# RML Output acceleration of previous cycle will be used as input for next cycle. If false, use the actual joint acceleration (from joint_state port) as input for the next cycle.
override_input_acceleration: true

# RML Output position of previous cycle will be used as input for next cycle. If false, use the actual joint position (from joint_state port) as input for the next cycle.
override_input_position: true

# RML Output speed of previous cycle will be used as input for next cycle. If false, use the actual joint speed (from joint_state port) as input for the next cycle.
override_input_speed: true

# Forcefully set the acceleration of the output command to this value (only for the specified joints)
override_output_acceleration:
  names: []
  elements: []

# Forcefully set the speed of the output command to this value (only for the specified joints)
override_output_speed:
  names: []
  elements: []

# Behavior when reaching positional limits. Can be one of 0 = RMLFlags::POSITIONAL_LIMITS_IGNORE,1 = RMLFlags::POSITIONAL_LIMITS_ERROR_MSG_ONLY, 2 = RMLFlags::POSITIONAL_LIMITS_ACTIVELY_PREVENT. Only available for Reflexxes Type_IV
positional_limits_behavior: 1

# The synchronization behavior of RML. Can be one of 0 = RMLFlags::PHASE_SYNCHRONIZATION_IF_POSSIBLE, 1 = RMLFlags::ONLY_TIME_SYNCHRONIZATION, 2 = RMLFlags::ONLY_PHASE_SYNCHRONIZATION, 3 = RMLFlags::NO_SYNCHRONIZATION
sync_behavior: 0

# Can be one of KEEP_SENDING_COMMANDS or STOP_SENDING_COMMANDS
target_reached_behavior: :KEEP_SENDING_COMMANDS

# Should an exception be thrown if input was infeasible, e.g. target speed too high?
throw_on_infeasible_input: true

# Write additional debug data to port or not
write_debug_data: true


--- name:aila
# Cycle time in seconds. IMPORTANT: This has to be the same value as the period of this component!
cycle_time: 0.02

# RML Output acceleration of previous cycle will be used as input for next cycle. If false, use the actual joint acceleration (from joint_state port) as input for the next cycle.
override_input_acceleration: true

# RML Output position of previous cycle will be used as input for next cycle. If false, use the actual joint position (from joint_state port) as input for the next cycle.
override_input_position: true

# RML Output speed of previous cycle will be used as input for next cycle. If false, use the actual joint speed (from joint_state port) as input for the next cycle.
override_input_speed: true

# Forcefully set the acceleration of the output command to this value (only for the specified joints)
override_output_acceleration:
  names: ["J_Foot"]
  elements: [{acceleration: 1.0}]

# Forcefully set the speed of the output command to this value (only for the specified joints)
override_output_speed:
  names: ["J_Foot"]
  elements: [{speed: 2.0}]

# Behavior when reaching positional limits. Can be one of 0 = RMLFlags::POSITIONAL_LIMITS_IGNORE,1 = RMLFlags::POSITIONAL_LIMITS_ERROR_MSG_ONLY, 2 = RMLFlags::POSITIONAL_LIMITS_ACTIVELY_PREVENT. Only available for Reflexxes Type_IV
positional_limits_behavior: 2

# The synchronization behavior of RML. Can be one of 0 = RMLFlags::PHASE_SYNCHRONIZATION_IF_POSSIBLE, 1 = RMLFlags::ONLY_TIME_SYNCHRONIZATION, 2 = RMLFlags::ONLY_PHASE_SYNCHRONIZATION, 3 = RMLFlags::NO_SYNCHRONIZATION
sync_behavior: 1

# Can be one of KEEP_SENDING_COMMANDS or STOP_SENDING_COMMANDS
target_reached_behavior: :KEEP_SENDING_COMMANDS

# Should an exception be thrown if input was infeasible, e.g. target speed too high?
throw_on_infeasible_input: false

# Write additional debug data to port or not
write_debug_data: true

# These are the motion constraints for the output trajectory. Will use max/min position, max vel, max acceleration and max jerk to shape the output trajectory.
limits:
  names: ["J_Foot", "J_Knees", "J_Hip", "J_Waist", 
          "J_Shoulder1_r", "J_Shoulder2_r", "J_UpperArm_r", "J_Elbow_r", "J_Forearm_r", "J_Wrist1_r", "J_Wrist2_r",
          "J_Shoulder1_l", "J_Shoulder2_l", "J_UpperArm_l", "J_Elbow_l", "J_Forearm_l", "J_Wrist1_l", "J_Wrist2_l", 
          "J_Pan", "J_Tilt"]  
  elements: [{max: {position: 1.919862175, speed: 0.1, acceleration: 0.5}, min: {position: -1.919862175}, max_jerk: 1.0}, # J_Foot
             {max: {position: 2.705260337, speed: 0.1, acceleration: 0.5}, min: {position: 2.1816615625}, max_jerk: 1.0}, # J_Knees
             {max: {position: 2.705260337, speed: 0.1, acceleration: 0.5}, min: {position: 1.919862175 }, max_jerk: 1.0}, # J_Hip
             {max: {position: 1.04719755,  speed: 0.1, acceleration: 0.5}, min: {position: -1.04719755 }, max_jerk: 1.0}, # J_Waist
             {max: {position: 3.1,         speed: 1.0, acceleration: 2.0}, min: {position: -3.1 }, max_jerk: 1.0},        # J_Shoulder1_r
             {max: {position: 1.433529862, speed: 1.0, acceleration: 2.0}, min: {position: -0.087266462}, max_jerk: 1.0}, # J_Shoulder2_r
             {max: {position: 2.9,         speed: 1.0, acceleration: 2.0}, min: {position: -2.9}, max_jerk: 1.0},         # J_UpperArm_r
             {max: {position: 2.0,         speed: 1.0, acceleration: 2.0}, min: {position: -0.34}, max_jerk: 1.0},        # J_Elbow_r
             {max: {position: 2.6,         speed: 1.0, acceleration: 2.0}, min: {position: -2.6}, max_jerk: 1.0},         # J_Forearm_r
             {max: {position: 0.0,         speed: 1.0, acceleration: 2.0}, min: {position: -1.570796325}, max_jerk: 1.0}, # J_Wrist1_r
             {max: {position: 0.610865237, speed: 1.0, acceleration: 2.0}, min: {position: -0.261799387}, max_jerk: 1.0}, # J_Wrist2_r
             {max: {position: 3.1,         speed: 1.0, acceleration: 2.0}, min: {position: -3.1 }, max_jerk: 1.0},        # J_Shoulder1_l
             {max: {position: 0.087266462, speed: 1.0, acceleration: 2.0}, min: {position: -1.433529862}, max_jerk: 1.0}, # J_Shoulder2_l
             {max: {position: 2.9,         speed: 1.0, acceleration: 2.0}, min: {position: -2.9}, max_jerk: 1.0},         # J_UpperArm_l
             {max: {position: 1.54,        speed: 1.0, acceleration: 2.0}, min: {position: -2.0}, max_jerk: 1.0},         # J_Elbow_l
             {max: {position: 2.6,         speed: 1.0, acceleration: 2.0}, min: {position: -2.6}, max_jerk: 1.0},         # J_Forearm_l
             {max: {position: 0.0,         speed: 1.0, acceleration: 2.0}, min: {position: -1.570796325}, max_jerk: 1.0}, # J_Wrist1_l
             {max: {position: 0.261799387, speed: 1.0, acceleration: 2.0}, min: {position: -0.610865237}, max_jerk: 1.0}, # J_Wrist2_l
             {max: {position: 0.785398162, speed: 1.0, acceleration: 4.0}, min: {position: -0.6981317  }, max_jerk: 1.0}, # J_Pan
             {max: {position: 0.523598775, speed: 1.0, acceleration: 4.0}, min: {position: -1.04719755 }, max_jerk: 1.0}] # J_Tilt

