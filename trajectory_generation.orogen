name "trajectory_generation"

import_types_from "base"
using_library "reflexxes"
import_types_from "trajectory_generationTypes.hpp"

task_context "Task" do
    cycle_time = 0.02

    needs_configuration
    runtime_states 'FOLLOWING', 'REACHED'

    property('limits', 'base/JointLimits').
        doc('The limits for the joints')
    property('cycle_time', 'double').
        doc('Cycle time in seconds')

    property('override_input_position', 'bool', false).
        doc('Set output position as input for next cycle')
    property('override_input_speed', 'bool', false).
        doc('Set output speed as input for next cycle')
    property('override_input_effort', 'bool', true).
        doc('Set output effort as input for next cycle')

    property('override_output_speed', 'double').
        doc('Set output speed to fixed value every time. Setting this value to NaN means no override.')
    property('override_output_effort', 'double').
        doc('Set output speed to fixed value every time. Setting this value to NaN means no override.')
    property('override_target_velocity', 'double').
        doc('Set target velocity forcefully to this value')


    input_port("trajectory_target", "/base/JointsTrajectory").
	doc("The target trajectory which should be followed")
    input_port("position_target", "/base/commands/Joints").
        doc("The target joint position")

    input_port("joint_state", "/base/samples/Joints").
	doc("Current state measurement from the actuators")

    output_port("cmd", "/base/commands/Joints").
	doc("Target values that are send to the actuators")
    output_port("average_cycle_rate", "double")

    port_driven "joint_state"
end

task_context "RMLVelocityTask" do
    cycle_time = 0.01

    needs_configuration
    runtime_states 'FOLLOWING', 'REACHED'

    property('limits', 'base/JointLimits').
        doc('The limits for the joints')
    property('cycle_time', 'double').
        doc('Cycle time in seconds')
    property('sync_behavior', 'int', 0).
        doc('The synchronization behavior of RML. See RMLFlags.h for info. ')

    property('override_input_position', 'bool', false).
        doc('Set output position as input for next cycle')
    property('override_input_speed', 'bool', false).
        doc('Set output speed as input for next cycle')
    property('override_input_effort', 'bool', false).
        doc('Set output effort as input for next cycle')

    input_port("velocity_target", "/base/commands/Joints").
        doc("The target joint velocity")

    input_port("joint_state", "/base/samples/Joints").
	doc("Current state measurement from the actuators")

    output_port("cmd", "/base/commands/Joints").
	doc("Target values that are send to the actuators")
    output_port("actual_cycle_time", "double")
    output_port("rml_input_params", "trajectory_generation/RMLVelocityInputParams")
    output_port("rml_output_params", "trajectory_generation/RMLVelocityOutputParams")

    periodic cycle_time
end

task_context "TestPlant" do
   needs_configuration
   property("limits", "/base/JointLimits")
   property("noise_mean", "/base/JointState")
   property("noise_variance", "/base/JointState")
   property("use_fixed_simulation_step_time", "bool")
   property("simulation_step_time", "double").doc("In seconds")
   
   input_port("cmd", "/base/commands/Joints")
   output_port("joint_state", "/base/samples/Joints")
   

   periodic 0.021172983273343216 #That's how fast artemis' joints update
end

deployment "plant_deployment" do
    task 'plant', 'trajectory_generation::TestPlant'
    add_default_logger
end
